import argparse
import socket # to connect to ports using tcp
import threading #parallelism
from queue import Queue

# Define the function that will be executed by each thread
def port_scan(port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    try:
        result = sock.connect_ex((args.host, port))
        if result == 0:
            print(f"Port {port} is open")
    except:
        pass
    sock.close()

# Define the function that will manage the thread pool
def thread_manager():
    while True:
        port = port_queue.get()
        port_scan(port)
        port_queue.task_done()

# Parse the command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("host", help="The target host to scan")
parser.add_argument("-p", "--ports", help="The range of ports to scan (default: 1-65535)", default="1-65535")
parser.add_argument("-t", "--threads", help="The number of threads to use (default: 10)", default=10, type=int)
args = parser.parse_args()

# Create the queue of ports to scan
port_queue = Queue()
start_port, end_port = map(int, args.ports.split("-"))
for port in range(start_port, end_port+1):
    port_queue.put(port)

# Create the thread pool and start the threads
threads = []
for i in range(args.threads):
    t = threading.Thread(target=thread_manager)
    t.daemon = True
    t.start()
    threads.append(t)

# Wait for all threads to finish
port_queue.join()
